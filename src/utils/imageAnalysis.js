export async function analyzeImage(file,{maxSize=512}={}){const img=await loadImageFromFile(file);const{canvas,ctx,dim}=drawToSquareCanvas(img,maxSize);const{w,h}=dim;const data=ctx.getImageData(0,0,w,h);const L=new Float32Array(w*h);for(let i=0;i<w*h;i++){const r=data.data[i*4],g=data.data[i*4+1],b=data.data[i*4+2];L[i]=(0.2126*r+0.7152*g+0.0722*b)/255}const N=72,cx=w/2,cy=h/2,R=Math.min(cx,cy)*0.98,inner=R*0.35,er0=R*0.75,er1=R*0.95;function ring(r0,r1){const s=[];for(let a=0;a<N;a++){const th=a/N*Math.PI*2,steps=40;let sum=0,cnt=0;for(let t=0;t<steps;t++){const rr=r0+(r1-r0)*t/(steps-1),x=Math.round(cx+rr*Math.cos(th)),y=Math.round(cy+rr*Math.sin(th));if(x>=0&&y>=0&&x<w&&y<h){sum+=L[y*w+x];cnt++}}s.push(cnt?sum/cnt:0)}return s}const center=ring(0,inner),edge=ring(er0,er1);const mean=a=>a.reduce((x,y)=>x+y,0)/Math.max(1,a.length);const std=a=>{const m=mean(a);return Math.sqrt(mean(a.map(v=>(v-m)**2)))};const cB=mean(center),eB=mean(edge),ecr=(eB+1e-6)/(cB+1e-6),oStd=std(edge);let bc=0;for(let i=0;i<L.length;i++)if(L[i]>0.95)bc++;const bFrac=bc/L.length,avg=mean(L),cl=x=>Math.max(0,Math.min(1,x));const donut=cl((ecr-1)/0.5),central=cl(((1/ecr)-1)/0.5),asym=cl(oStd/0.1),hot=cl(bFrac/0.02),risk=cl(0.35*asym+0.25*hot+0.2*donut+0.2*central);const tags=[];if(donut>0.6)tags.push('anillo/donut');if(central>0.6)tags.push('canal central');if(asym>0.6)tags.push('flujo desigual');if(hot>0.6)tags.push('microjets/spritz');if(avg>0.7)tags.push('blonding');const overlay=document.createElement('canvas');overlay.width=w;overlay.height=h;const o=overlay.getContext('2d');o.drawImage(canvas,0,0);o.strokeStyle='rgba(86,148,255,.6)';o.lineWidth=2;[inner,er0,er1,R].forEach(r=>{o.beginPath();o.arc(cx,cy,r,0,Math.PI*2);o.stroke()});o.strokeStyle='rgba(86,148,255,.25)';for(let a=0;a<12;a++){const th=a/12*Math.PI*2;o.beginPath();o.moveTo(cx,cy);o.lineTo(cx+R*Math.cos(th),cy+R*Math.sin(th));o.stroke()}return{width:w,height:h,edgeCenterRatio:ecr,centerB:cB,edgeB:eB,outerStd:oStd,brightFrac:bFrac,avgBrightness:avg,donutScore:donut,centerScore:central,asymmetryScore:asym,hotspotScore:hot,channelingRisk:risk,tags,overlay}}export async function analyzeHeatmapOptional(file,{grid=16,maxSize=512}={}){if(!file)return null;const img=await loadImageFromFile(file);const{canvas,ctx,dim}=drawToSquareCanvas(img,maxSize);const{w,h}=dim;const data=ctx.getImageData(0,0,w,h);const L=new Float32Array(w*h);for(let i=0;i<w*h;i++){const r=data.data[i*4],g=data.data[i*4+1],b=data.data[i*4+2];L[i]=(0.2126*r+0.7152*g+0.0722*b)/255}const cw=Math.floor(w/grid),ch=Math.floor(h/grid);const cells=[];for(let gy=0;gy<grid;gy++){for(let gx=0;gx<grid;gx++){let s=0,c=0;for(let y=gy*ch;y<Math.min((gy+1)*ch,h);y++){for(let x=gx*cw;x<Math.min((gx+1)*cw,w);x++){s+=L[y*w+x];c++}}cells.push(c?s/c:0)}}const m=cells.reduce((a,b)=>a+b,0)/cells.length;const v=Math.sqrt(cells.reduce((a,b)=>a+(b-m)**2,0)/cells.length);const u=1-Math.min(1,v/0.15);return{uniformity:u,mean:m,std:v}}function drawToSquareCanvas(img,maxSize=512){const size=Math.min(maxSize,Math.max(img.width,img.height));const canvas=document.createElement('canvas');canvas.width=size;canvas.height=size;const ctx=canvas.getContext('2d');const scale=Math.max(size/img.width,size/img.height);const w=img.width*scale,h=img.height*scale;const dx=(size-w)/2,dy=(size-h)/2;ctx.imageSmoothingEnabled=true;ctx.imageSmoothingQuality='high';ctx.drawImage(img,dx,dy,w,h);return{canvas,ctx,dim:{w:size,h:size}}}function loadImageFromFile(file){return new Promise((res,rej)=>{const url=URL.createObjectURL(file);const img=new Image();img.onload=()=>{URL.revokeObjectURL(url);res(img)};img.onerror=rej;img.src=url})}
